#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <cstring>
using namespace std;

const int dy[8] = { -1,0,0,1 };
const int dx[8] = { 0,-1,1,0 };

int a[1001][1001], dist[1001][1001][2];
int n, m, res = 987654321;
string s;
struct wall{
    int y;
    int x;
    int broken;
};

int BFS() {
    memset(dist, -1, sizeof(dist));
    dist[0][0][0] = 1; // 처음 거리가 1

    queue<wall> q;
    q.push({ 0,0 });
    
    while (!q.empty()) {
        wall cur = q.front();
        int y = cur.y;
        int x = cur.x;
        int b = cur.broken;
        q.pop();

        for (int i = 0; i < 4; i++) {
            int ny = y + dy[i];
            int nx = x + dx[i];
            if (ny >= n || nx >= m || ny < 0 || nx < 0) continue;
            if (a[ny][nx] && b == 0 && dist[ny][nx][1] == -1) { // 벽이고 아직 안 부숨
                dist[ny][nx][1] = dist[y][x][0] + 1;
                q.push({ ny,nx,1 });
            }
            else if (a[ny][nx] == 0 && dist[ny][nx][b] == -1) { // 빈칸, 현재 상태 유지
                dist[ny][nx][b] = dist[y][x][b] + 1;
                q.push({ ny,nx,b });
            }
        }
    }
    
    int a1 = dist[n - 1][m - 1][0];
    int a2 = dist[n - 1][m - 1][1];

    if (a1 == -1 && a2 == -1) return -1;
    else if (a1 == -1) return a2;
    else if (a2 == -1) return a1;
    else return min(a1, a2);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        cin >> s;
        for (int j = 0; j < m; j++) {
            a[i][j] = int(s[j] - '0');
        }
    }

    cout << BFS();

    return 0;
}
