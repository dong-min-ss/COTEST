#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <cstring>
using namespace std;

const int dy[] = { -1,0,0,1 };
const int dx[] = { 0,-1,1,0 };

int a[101][101], b[101][101], visitedA[101][101], visitedB[101][101];
int n, cntA, cntB;
string s;

void DFS(int y, int x, int arr[][101], int visited[][101]) {
    visited[y][x] = 1;
    
    for (int i = 0; i < 4; i++) {
        int ny = y + dy[i];
        int nx = x + dx[i];
        if (ny >= n || nx >= n || ny < 0 || nx < 0) continue;
        if (visited[ny][nx]) continue; // 이미 방문
        if (arr[y][x] != arr[ny][nx]) continue; // 같은 색이 아님
        DFS(ny, nx, arr, visited);
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> s;
        for (int j = 0; j < n; j++) {
            if (s[j] == 'R') { // 빨간색은 1
                a[i][j] = 1;
                b[i][j] = 1;
            }
            else if(s[j] == 'G') { // 초록색은 2
                a[i][j] = 2;
                b[i][j] = 1; // 색맹은 초록색을 빨간색으로
            }
            else { // 파랑색은 3
                a[i][j] = 3;
                b[i][j] = 3;
            }
        }
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (!visitedA[i][j]) {
                DFS(i, j, a, visitedA);
                cntA++;
            }
            if (!visitedB[i][j]) {
                DFS(i, j, b, visitedB);
                cntB++;
            }
        }
    }

    cout << cntA << " " << cntB;

    return 0;
}
