#include<iostream>
#include<vector>
#include<queue>
#include<cstring>
#include<algorithm>
#include<climits>
#include<string>
#include<cmath>
#include<iomanip>
using namespace std;
typedef long long ll;

const int INF = 987654321;

typedef pair<int, int> p; // y, x에 대해 저장
const int dy[] = { -1,0,1,0 };
const int dx[] = { 0,1,0,-1 };
int n;
int dist[128][128], a[128][128];

int go() {
    priority_queue<pair<int, p>, vector<pair<int, p>>, greater<>> pq;
    pq.push({ a[0][0], { 0,0 } });
    dist[0][0] = a[0][0];

    while (!pq.empty()) {
        int cost = pq.top().first;
        int y = pq.top().second.first;
        int x = pq.top().second.second;
        pq.pop();

        if (dist[y][x] < cost) continue;

        for (int i = 0; i < 4; i++) {
            int ny = y + dy[i];
            int nx = x + dx[i];
            if (ny < 0 || nx < 0 || ny >= n || nx >= n) continue;
            
            if (cost + a[ny][nx] < dist[ny][nx]) {
                dist[ny][nx] = cost + a[ny][nx];
                pq.push({ dist[ny][nx],{ny,nx} });
            }
        }
    }
    return dist[n - 1][n - 1];
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int test_case = 1;
    while (true) {
        cin >> n;
        if (n == 0) break;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> a[i][j];
            }
        }

        fill(&dist[0][0], &dist[0][0] + 128 * 128, INF);

        cout << "Problem " << test_case << ": " << go() << "\n";
        test_case++;
    }

    return 0;
}