#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <queue>
using namespace std;

const int dy[] = { -1,0,1,0 };
const int dx[] = { 0,1,0,-1 };

int t, n, m, a, b;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    cin >> t;
    while (t--) {
        cin >> n >> m;
        vector<vector<int>> adj(n + 1); // 인접리스트
        vector<int> time(n + 1); // 건설 시간
        vector<int> indegree(n + 1); // 진입 차수

        for (int i = 1; i <= n; i++) {
            cin >> time[i];
        }

        for (int i = 0; i < m; i++) {
            cin >> a >> b;
            adj[a].push_back(b);
            indegree[b]++;
        }

        vector<int> dp(n + 1); // i번 건물을 짓는데 걸리는 최소 시간
        int w;
        cin >> w;

        queue<int> q;
        for (int i = 1; i <= n; i++) {
            dp[i] = time[i];
            if (indegree[i] == 0) q.push(i); // 진입 차수가 0이면 큐에 넣기
        }

        while (!q.empty()) {
            int cur = q.front();
            q.pop();

            for (int next : adj[cur]) {
                dp[next] = max(dp[next], dp[cur] + time[next]);
                if (--indegree[next] == 0) q.push(next);
            }
        }
        cout << dp[w] << "\n";
    }
    

    return 0;
}
