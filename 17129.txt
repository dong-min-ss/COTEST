#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <queue>
using namespace std;
typedef long long ll;

const int dy[] = { -1,0,1,0 };
const int dx[] = { 0,1,0,-1 };
const int INF = 987654321;

int n, m, a[3003][3003], dist[3003][3003];
string s;
queue<pair<int,int>> q;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    memset(dist, -1, sizeof(dist));

    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        cin >> s;
        for (int j = 0; j < m; j++) {
            a[i][j] = (int)s[j] - '0';
            if (a[i][j] == 2) {
                q.push({ i,j });
                dist[i][j] = 0;
            }
        }
    }

    while (!q.empty()) {
        int y = q.front().first;
        int x = q.front().second;
        q.pop();

        for (int i = 0; i < 4; i++) {
            int ny = y + dy[i];
            int nx = x + dx[i];
            if (ny >= n || nx >= m || ny < 0 || nx < 0) continue; // 나갔어
            if (a[ny][nx] == 1) continue; // 벽이야
            if (dist[ny][nx] != -1) continue; // 이미 왔어

            dist[ny][nx] = dist[y][x] + 1;
            q.push({ ny,nx });
        }
    }

    int eat = INF;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (a[i][j] >= 3 && dist[i][j] != -1) {
                eat = min(eat, dist[i][j]);
            }
        }
    }
    if (eat == INF) cout << "NIE";
    else cout << "TAK\n" << eat;

    return 0;
}