#include <iostream>
#include <vector>
#include <cctype>
#include <stack>
#include <algorithm>
#include <string>
using namespace std;
typedef long long ll;

const int dy[] = { -1,1,-1,1 };
const int dx[] = { 1,-1,-1,1 };

int a[11][11], n;
vector<pair<int, int>> black, white; // 이 두 벡터는 경로가 절대 안 겹침

int DFS(const vector<pair<int,int>>& v, int idx, int cnt) { // 비숍이 있는 칸은 2로
    if (idx >= v.size())
        return cnt;

    bool canPlace = true;
    int y = v[idx].first;
    int x = v[idx].second;

    for (int i = 0; i < 4; i++) {
        int block = 1;
        while (true) { // 경계를 벗어날때까지 대각선 검사
            int ny = y + dy[i] * block;
            int nx = x + dx[i] * block;
            if (ny >= n || nx >= n || ny < 0 || nx < 0) break;
            if (a[ny][nx] == 2){
                canPlace = false;
                break; // 이 자리엔 둘 수 없음!
            }
            block++;
        }
        if (!canPlace) break; // 이미 다른 방향에서 검사함
    }

    int res1 = 0;
    int res2 = 0;
    if (canPlace) { // 둘 수 있는 경우
        a[y][x] = 2; // 비숍을 두고
        res1 = DFS(v, idx + 1, cnt + 1);
        a[y][x] = 1; // 원상 복구
    }
    res2 = DFS(v, idx + 1, cnt); // 안 두는 경우 or 못 두는 경우

    return max(res1, res2);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> a[i][j];
            if (a[i][j] == 1) {
                if ((i + j) % 2 == 0)
                    black.push_back({ i, j });
                else
                    white.push_back({ i, j });
            }
        }
    }

    int ans_black = DFS(black, 0, 0);
    int ans_white = DFS(white, 0, 0);

    cout << ans_black + ans_white;

    return 0;
}