#include<iostream>
#include<vector>
#include<stack>
#include<cstring>
#include<algorithm>
#include<climits>
#include<iomanip>
using namespace std;
typedef long long ll;

int n, lis[1000001], len, num;
pair<int, int> res[1000001];
stack<int> stk;
const int INF = 1000000004;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    fill(lis, lis + 1000001, INF); // 10억 이상으로 초기화

    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> num;
        auto lowerPos = lower_bound(lis, lis + len, num); // num이상의 첫 위치를 포인터로 반환
        int _pos = (int)(lower_bound(lis, lis + len, num) - lis); // num이 lis에 들어갈 위치의 인덱스
        if (*lowerPos == INF) len++; // num보다 큰 값이 없으면 뒤에 추가
        *lowerPos = num; // num으로 갱신(포인터가 가리키는 lis 배열의 값갱신)
        res[i].first = _pos;
        res[i].second = num;
    }

    cout << len << "\n";
    for (int i = n - 1; i >= 0; i--) {
        if (res[i].first == len - 1) {
            stk.push(res[i].second);
            len--;
        }
    }
    while (stk.size()) {
        cout << stk.top() << " ";
        stk.pop();
    }

    return 0;
}