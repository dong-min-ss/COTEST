#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <queue>
using namespace std;

const int dy[] = { -1,0,1,0 };
const int dx[] = { 0,1,0,-1 };

int n, m, a[1001][1001], dist[1001][1001];
queue<pair<int, int>> Tomato;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    memset(dist, -1, sizeof(dist));
    cin >> m >> n;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> a[i][j];
            if (a[i][j] == 1) {
                dist[i][j] = 0;
                Tomato.push({ i,j });
            }
        }
    }

    while (!Tomato.empty()) {
        int y = Tomato.front().first;
        int x = Tomato.front().second;
        Tomato.pop();

        for (int i = 0; i < 4; i++) {
            int ny = y + dy[i];
            int nx = x + dx[i];
            if (ny >= n || nx >= m || ny < 0 || nx < 0) continue;
            if (a[ny][nx] == -1 || a[ny][nx] == 1) continue;
            if (dist[ny][nx] != -1) continue;
            dist[ny][nx] = dist[y][x] + 1;
            Tomato.push({ ny,nx });
        }
    }

    int res = -1;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            //cout << dist[i][j] << " ";
            if (dist[i][j] == -1 && a[i][j] != -1) {
                cout << -1;
                return 0;
            }
            res = max(res, dist[i][j]);
        }
        //cout << "\n";
    }

    cout << res;
   
    return 0;
}
