#include<iostream>
#include<vector>
#include<map>
#include<cstring>
#include<algorithm>
#include<climits>
#include<iomanip>
using namespace std;
typedef long long ll;

int n, m, a[51][51], dp[51][51];
int visited[51][51][51][51];

const int dy[] = { -1,0,1,0 };
const int dx[] = { 0,1,0,-1 };
bool flag;

void check(int y, int x, int py, int px) {
    if (flag) return;

    int t = a[y][x]; // 이동 횟수
    for (int i = 0; i < 4; i++) {
        int ny = y + t * dy[i];
        int nx = x + t * dx[i];
        if (ny < 0 || nx < 0 || ny >= n || nx >= m || a[ny][nx] == -1) continue;

        if (visited[y][x][ny][nx]) {
            flag = true;
            return;
        }

        if (dp[ny][nx] < dp[y][x] + 1) { // 더 높은 값만 업데이트
            dp[ny][nx] = dp[y][x] + 1;
            visited[y][x][ny][nx] = 1; // 현재-이전 경로 방문 기록
            check(ny, nx, y, x);
            visited[y][x][ny][nx] = 0; // 경로 복원
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n >> m;
    string s;
    for (int i = 0; i < n; i++) {
        cin >> s;
        for (int j = 0; j < m; j++) {
            char c = s[j]; // 문자열로 입력 받고
            if (c == 'H') a[i][j] = -1; // 구멍이면 -1
            else a[i][j] = (int)(c - '0'); // 숫자면 형변환
        }
    }

    dp[0][0] = 1;
    check(0, 0, -1, -1);
    
    if (flag) cout << -1; // 무한루트가 있으면 -1
    else {
        int ret = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                ret = max(ret, dp[i][j]);
            }
        }
        cout << ret;
    }

    return 0;
}