#include<iostream>
#include<vector>
#include<cstring>
#include<algorithm>
#include<climits>
#include<string>
#include<cmath>
#include<iomanip>
using namespace std;
typedef long long ll;

const int dy[] = { -1,-1,-1,0,0,1,1,1 };
const int dx[] = { -1,0,1,-1,1,-1,0,1 };

int n, m, year, a[12][12], feed[12][12];
vector<int> tree[12][12]; // 한칸 안에 있는 나무

void spring_summer() {
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (tree[i][j].size() == 0) continue;
            int die = 0;
            vector<int> tmp; // 나무 변경
            sort(tree[i][j].begin(), tree[i][j].end()); // 어린 나무부터
            for (int t : tree[i][j]) {
                if (t <= a[i][j]) { // 흡수할 영양분이 있는 경우
                    tmp.push_back(t + 1); // 나이 한살 추가
                    a[i][j] -= t; // 나이만큼 감소
                }
                else {
                    die += t / 2; // 나이의 절반이 영양분으로
                }
            }
            tree[i][j] = tmp; // 새로운 나무 구성 // 벡터도 대입 연산
            a[i][j] += die; // 영양분 추가
        }
    }
}
void fall() {
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (tree[i][j].size() == 0) continue; // 나무가 없으면 패스
            for (int t : tree[i][j]) {
                if (t % 5 == 0) { // 나무의 나이가 5의 배수
                    for (int d = 0; d < 8; d++) {
                        int ny = i + dy[d];
                        int nx = j + dx[d];
                        if (ny<1 || nx<1 || ny>n || nx>n) continue; // 경계를 벗어나면 패스
                        tree[ny][nx].push_back(1); // 새로운 나무 추가
                    }
                }
            }
        }
    }
}
void winter() {
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            a[i][j] += feed[i][j]; // 영양분 추가
        }
    }
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    fill(&a[0][0], &a[0][0] + 12 * 12, 5);

    cin >> n >> m >> year;

    for (int i = 1; i <= n; i++) { // 겨울마다 추가될 영양분
        for (int j = 1; j <= n; j++) {
            cin >> feed[i][j];
        }
    }
    for (int i = 0; i < m; i++) { // 심는 나무
        int y, x, old;
        cin >> y >> x >> old;
        tree[y][x].push_back(old);
    }
    
    for (int i = 0; i < year; i++) {
        spring_summer();
        fall();
        winter();
    }

    int ret = 0;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            ret += tree[i][j].size();
        }
    }

    cout << ret;

    return 0;
}