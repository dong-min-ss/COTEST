#include <iostream>
#include <vector>
#include <cctype>
#include <map>
#include <algorithm>
#include <string>
using namespace std;
typedef long long ll;

const int dy[] = { -1, 0, 1, 0 };
const int dx[] = { 0, 1, 0, -1 };

vector<pair<int, int>> v;
int n, t, p;

int solve(int sum, int idx, int flag) {
    if (idx > n) return sum;
    
    if (flag) {
        if (idx + v[idx].first -1 > n) return sum;
        int a = solve(sum + v[idx].second, idx + v[idx].first, 1); // 포함
        int b = solve(sum + v[idx].second, idx + v[idx].first, 0); // 미포함
        return max(a, b);
    }
    else {
        int a = solve(sum, idx + 1, 1); // 포함
        int b = solve(sum, idx + 1, 0); // 미포함
        return max(a, b);
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n;
    v.push_back({ 0,0 });
    for (int i = 0; i < n; i++) {
        cin >> t >> p;
        v.push_back({ t,p });
    }
    
    int tmp1 = solve(0, 1, 1); // 첫번째 포함
    int tmp2 = solve(0, 1, 0); // 미포함

    cout << max(tmp1, tmp2);
}