#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <queue>
using namespace std;

const int dy[] = { 0, -1,0,1,0 };
const int dx[] = { 0, 0,1,0,-1 };

int n, m, k, sum;
int r, c, s, d, z;
struct shark {
    int y;
    int x;
    int speed;
    int direction;
    int sz;
};
vector<shark> v;
int ocean[104][104]; // 상어의 인덱스를 넣어서 크기 비교할거임

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    memset(ocean, -1, sizeof(ocean));
    cin >> n >> m >> k;
    // 제자리(같은 방향)로 오는데 필요한 이동
    int turnX = 2 * (m - 1);
    int turnY = 2 * (n - 1);

    for (int i = 0; i < k; i++) {
        cin >> r >> c >> s >> d >> z;
        v.push_back({ r,c,s,d,z });
        ocean[r][c] = i;
    }

    for (int i = 1; i <= m; i++) {
        //cout << "\n낚시꾼은 " << i << " 위에\n";
        for (int j = 1; j <= n; j++) { // 상어 낚시 성공
            if (ocean[j][i] != -1) {
                //cout << char(ocean[j][i] + 'A') << "상어 (" << j << ", " << i << ") 낚시!!\n";
                sum += v[ocean[j][i]].sz;
                v[ocean[j][i]].sz = -1;
                ocean[j][i] = -1;
                break;
            }
        }

        int next_ocean[104][104];
        memset(next_ocean, -1, sizeof(next_ocean));

        for (int j = 0; j < k; j++) {
            if (v[j].sz == -1) continue;

            shark cur = v[j];
            int spd = cur.speed;
            int dir = cur.direction;
            int y = cur.y;
            int x = cur.x;

            if (dir <= 2) {
                spd %= turnY;
                while (spd > 0) {
                    if (dir == 1) {
                        if (y == 1) dir = 2;
                        else y--, spd--;
                    }
                    else {
                        if (y == n) dir = 1;
                        else y++, spd--;
                    }
                }
            }
            else {
                spd %= turnX;
                while (spd > 0) {
                    if (dir == 3) {
                        if (x == m) dir = 4;
                        else x++, spd--;
                    }
                    else {
                        if (x == 1) dir = 3;
                        else x--, spd--;
                    }
                }
            }

            v[j].y = y;
            v[j].x = x;
            v[j].direction = dir;

            int& spot = next_ocean[y][x];
            if (spot == -1) {
                spot = j;
            }
            else {
                if (v[spot].sz < v[j].sz) {
                    v[spot].sz = -1;
                    spot = j;
                }
                else {
                    v[j].sz = -1;
                }
            }
        }

        // ocean 배열 갱신
        memcpy(ocean, next_ocean, sizeof(ocean));
    }
    
    cout << sum;

    return 0;
}
