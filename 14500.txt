#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <queue>
#include <map>
using namespace std;
typedef long long ll;

const int dy[] = { -1,0,1,0 };
const int dx[] = { 0,1,0,-1 };

int n, m, a[501][501], visited[501][501], res;

void middle_finger(int y, int x) {
    int center = a[y][x];
    for (int i = 0; i < 4; i++) {
        int sum = center;
        bool valid = true;
        for (int j = 0; j < 3; j++) {
            int d = (i + j) % 4; // 4가지 ㅗ 모양
            int ny = y + dy[d];
            int nx = x + dx[d];
            if (ny < 0 || nx < 0 || ny >= n || nx >= m) {
                valid = false;
                break;
            }
            sum += a[ny][nx];
        }
        if (valid) res = max(res, sum);
    }
}

void go(int y, int x, int sum, int cnt) {
    if (cnt == 4) {
        res = max(res, sum);
        return;
    }
    
    for (int i = 0; i < 4; i++) {
        int ny = y + dy[i];
        int nx = x + dx[i];

        if (ny >= n || nx >= m || ny < 0 || nx < 0) continue;
        if (visited[ny][nx]) continue;
        visited[ny][nx] = 1;
        go(ny, nx, sum + a[ny][nx], cnt + 1);
        visited[ny][nx] = 0;
    }
}
int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> a[i][j];
        }
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            visited[i][j] = 1;
            go(i, j, a[i][j], 1);
            visited[i][j] = 0;
            middle_finger(i, j);
        }
    }
    cout << res;

    return 0;
}