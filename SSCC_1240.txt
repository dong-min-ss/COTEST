#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<cstring>
using namespace std;

// const int dy[] = { -1,0,1,0 };
// const int dx[] = { 0,1,0,-1 };

int n, m, v, a, b, visited[1004];
int adj1[1004][1004];
vector<int> adj2[1004];

int DFS(int cur, int target, int sum) { 
	if (cur == target)
		return sum;

	visited[cur] = 1;

	for (auto a : adj2[cur]) {
		if (visited[a] == 0) {
			int res = DFS(a, target, sum + adj1[cur][a]);
			if (res != -1)
				return res;
		}
	}

	return -1; // 경로 없음
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	cin >> n >> m;
	for (int i = 0; i < n - 1; i++) {
		cin >> a >> b >> v;
		adj1[a][b] = v;
		adj1[b][a] = v;
		adj2[a].push_back(b);
		adj2[b].push_back(a);
	}

	for (int i = 0; i < m; i++) {
		memset(visited, 0, sizeof(visited));
		cin >> a >> b;
		cout << DFS(a, b, 0) << "\n";
	}

	return 0;
}