#include<iostream>
#include<vector>
#include<stack>
#include<cstring>
#include<algorithm>
#include<climits>
#include<iomanip>
using namespace std;
typedef long long ll;

int n, dp[1000001], trace[1000001];

int check(int num) {
    if (num == 1) return 0;
    int& ret = dp[num];
    if (ret != -1) return ret;

    ret = check(num - 1) + 1;
    trace[num] = num - 1;

    if (num % 3 == 0) {
        int tmp = check(num / 3) + 1;
        if (tmp < ret) {
            ret = tmp;
            trace[num] = num / 3;
        }
    }

    if (num % 2 == 0) {
        int tmp = check(num / 2) + 1;
        if (tmp < ret) {
            ret = tmp;
            trace[num] = num / 2;
        }
    }

    return ret;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n;
    memset(dp, -1, sizeof(dp));
    memset(trace, -1, sizeof(trace));

    cout << check(n) << "\n";

    vector<int> path;
    for (int i = n; i != -1; i = trace[i]) {
        path.push_back(i);
        if (i == 1) break;
    }

    for (int i : path) cout << i << " ";
    cout << "\n";

    return 0;
}