#include<iostream>
#include<vector>
#include<stack>
#include<cstring>
#include<algorithm>
#include<climits>
#include<iomanip>
using namespace std;
typedef long long ll;

int n, a[20][20], dp[20][20][3];

bool check(int y, int x, int direction) {
    if (direction == 0 || direction == 2) {
        if (a[y][x] == 0) return true;
    }
    else if (direction == 1) {
        if (a[y][x] == 0 && a[y - 1][x] == 0 && a[y][x - 1] == 0) return true;
    }
    return false;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            cin >> a[i][j];
        }
    }
    dp[1][2][0] = 1; // 시작점은 한가지 방법

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            // 가로로 오는 경우의 수
            if (check(i, j + 1, 0)) dp[i][j + 1][0] += dp[i][j][0];
            if (check(i + 1, j + 1, 1))dp[i + 1][j + 1][1] += dp[i][j][0];

            // 대각선으로 오는 경우의 수
            if (check(i, j + 1, 0)) dp[i][j + 1][0] += dp[i][j][1];
            if (check(i + 1, j + 1, 1))dp[i + 1][j + 1][1] += dp[i][j][1];
            if (check(i + 1, j, 2))dp[i + 1][j][2] += dp[i][j][1];

            // 세로로 오는 경우의 수
            if (check(i + 1, j + 1, 1))dp[i + 1][j + 1][1] += dp[i][j][2];
            if (check(i + 1, j, 2))dp[i + 1][j][2] += dp[i][j][2];
        }
    }

    int ret = dp[n][n][0];
    ret += dp[n][n][1] + dp[n][n][2];
    cout << ret;

    return 0;
}