#include<iostream>
#include<vector>
#include<stack>
#include<cstring>
#include<algorithm>
#include<climits>
#include<iomanip>
using namespace std;
typedef long long ll;

int dp[1004][2][34], n, m, b[1004];

int check(int idx, int tree, int cnt) {
    if (cnt < 0) return -1e9;
    if (idx == n) return cnt == 0 ? 0 : -1e9;

    int& ret = dp[idx][tree][cnt];
    if (ret != -1) return ret; // 이미 계산된 값

    // max(이동하는 경우 or 그대로 있는 경우) + 사과가 있으면 1 아니면 0
    return ret = max(check(idx + 1, tree ^ 1, cnt - 1), check(idx + 1, tree, cnt)) + (tree == b[idx] - 1 ? 1 : 0);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    memset(dp, -1, sizeof(dp));
    cin >> n >> m;
    for (int i = 0; i < n; i++)
        cin >> b[i];

    cout << max(check(0, 1, m - 1), check(0, 0, m));

    return 0;
}